import sys
#sys.path.insert(0, '../../core/pyspec/')

from pathlib import Path
from test_gen import *

#bls.init()

if len(sys.argv) >= 2:
    test_path = Path(sys.argv[1])
else:
    test_path = Path('integration_tests')

if not test_path.exists():
    test_path.mkdir()

def dump_events(st, test_name):
    dump_test_case(st.bls_setting, genesis_state, st.events, test_path, test_name)

def run_tests(test_suite):
    for t in test_suite:
        try:
            t()
        except Exception as e:
            print('exception ' + str(e))
            
test_suite = []

gf1,gf2 = (2,2)

genesis_state = get_genesis_state(chain_start = make_chain_start())
#genesis_state = get_genesis_state(chain_start_file="chain_start_v0.12x.yaml")
#genesis_state = load_data(Path('genesis_v0.12x.yaml'), spec.BeaconState)

def invalid_block__testInvalidParent():
  print('invalid_block__testInvalidParent')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 2, head_0, atts_0, bad_parent = True)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_not_in_store_check(block_root(b_0))
  dump_events(st, "invalid_block__testInvalidParent")

test_suite.append(invalid_block__testInvalidParent)

def invalid_block__testInvalidSignature():
  print('invalid_block__testInvalidSignature')
  st = State(genesis_state.copy())
  st.set_bls_setting(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 2, head_0, atts_0, bad_signature = True)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_not_in_store_check(block_root(b_0))
  dump_events(st, "invalid_block__testInvalidSignature")

test_suite.append(invalid_block__testInvalidSignature)

def invalid_block__testInvalidStateRoot():
  print('invalid_block__testInvalidStateRoot')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 2, head_0, atts_0, bad_state = True)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_not_in_store_check(block_root(b_0))
  dump_events(st, "invalid_block__testInvalidStateRoot")

test_suite.append(invalid_block__testInvalidStateRoot)

def valid_block__testExisting():
  print('valid_block__testExisting')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 2, head_0, atts_0)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testExisting")

test_suite.append(valid_block__testExisting)

def valid_block__testExisting2():
  print('valid_block__testExisting2')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 2, head_0, atts_0)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  st.set_slot(3)
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testExisting2")

test_suite.append(valid_block__testExisting2)

def valid_block__testFinalizedAncestor():
  print('valid_block__testFinalizedAncestor')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = mk_atts(st,0,head_0,None)
  st.att_cache.extend(atts_0)
  st.set_slot(1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 1, head_1, atts_1)
  st.send_block(b_0)
  head_2 = st.get_head()
  atts_2 = mk_atts(st,1,head_2,None)
  st.att_cache.extend(atts_2)
  st.set_slot(2)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  head_3 = st.get_head()
  b_1 = mk_block(st, 2, head_3, atts_3)
  st.send_block(b_1)
  head_4 = st.get_head()
  atts_4 = mk_atts(st,2,head_4,None)
  st.att_cache.extend(atts_4)
  st.set_slot(3)
  atts_5 = st.att_cache[:]
  st.att_cache.clear()
  head_5 = st.get_head()
  b_2 = mk_block(st, 3, head_5, atts_5)
  st.send_block(b_2)
  head_6 = st.get_head()
  atts_6 = mk_atts(st,3,head_6,None)
  st.att_cache.extend(atts_6)
  st.set_slot(4)
  atts_7 = st.att_cache[:]
  st.att_cache.clear()
  head_7 = st.get_head()
  b_3 = mk_block(st, 4, head_7, atts_7)
  st.send_block(b_3)
  head_8 = st.get_head()
  atts_8 = mk_atts(st,4,head_8,None)
  st.att_cache.extend(atts_8)
  st.set_slot(5)
  atts_9 = st.att_cache[:]
  st.att_cache.clear()
  head_9 = st.get_head()
  b_4 = mk_block(st, 5, head_9, atts_9)
  st.send_block(b_4)
  head_10 = st.get_head()
  atts_10 = mk_atts(st,5,head_10,None)
  st.att_cache.extend(atts_10)
  st.set_slot(6)
  atts_11 = st.att_cache[:]
  st.att_cache.clear()
  head_11 = st.get_head()
  b_5 = mk_block(st, 6, head_11, atts_11)
  st.send_block(b_5)
  head_12 = st.get_head()
  atts_12 = mk_atts(st,6,head_12,None)
  st.att_cache.extend(atts_12)
  st.set_slot(7)
  atts_13 = st.att_cache[:]
  st.att_cache.clear()
  head_13 = st.get_head()
  b_6 = mk_block(st, 7, head_13, atts_13)
  st.send_block(b_6)
  head_14 = st.get_head()
  atts_14 = mk_atts(st,7,head_14,None)
  st.att_cache.extend(atts_14)
  st.set_slot(8)
  atts_15 = st.att_cache[:]
  st.att_cache.clear()
  head_15 = st.get_head()
  b_7 = mk_block(st, 8, head_15, atts_15)
  st.send_block(b_7)
  head_16 = st.get_head()
  atts_16 = mk_atts(st,8,head_16,None)
  st.att_cache.extend(atts_16)
  st.set_slot(9)
  atts_17 = st.att_cache[:]
  st.att_cache.clear()
  head_17 = st.get_head()
  b_8 = mk_block(st, 9, head_17, atts_17)
  st.send_block(b_8)
  head_18 = st.get_head()
  atts_18 = mk_atts(st,9,head_18,None)
  st.att_cache.extend(atts_18)
  st.set_slot(10)
  atts_19 = st.att_cache[:]
  st.att_cache.clear()
  head_19 = st.get_head()
  b_9 = mk_block(st, 10, head_19, atts_19)
  st.send_block(b_9)
  head_20 = st.get_head()
  atts_20 = mk_atts(st,10,head_20,None)
  st.att_cache.extend(atts_20)
  st.set_slot(11)
  atts_21 = st.att_cache[:]
  st.att_cache.clear()
  head_21 = st.get_head()
  b_10 = mk_block(st, 11, head_21, atts_21)
  st.send_block(b_10)
  head_22 = st.get_head()
  atts_22 = mk_atts(st,11,head_22,None)
  st.att_cache.extend(atts_22)
  st.set_slot(12)
  atts_23 = st.att_cache[:]
  st.att_cache.clear()
  head_23 = st.get_head()
  b_11 = mk_block(st, 12, head_23, atts_23)
  st.send_block(b_11)
  head_24 = st.get_head()
  atts_24 = mk_atts(st,12,head_24,None)
  st.att_cache.extend(atts_24)
  st.set_slot(13)
  atts_25 = st.att_cache[:]
  st.att_cache.clear()
  head_25 = st.get_head()
  b_12 = mk_block(st, 13, head_25, atts_25)
  st.send_block(b_12)
  head_26 = st.get_head()
  atts_26 = mk_atts(st,13,head_26,None)
  st.att_cache.extend(atts_26)
  st.set_slot(14)
  atts_27 = st.att_cache[:]
  st.att_cache.clear()
  head_27 = st.get_head()
  b_13 = mk_block(st, 14, head_27, atts_27)
  st.send_block(b_13)
  head_28 = st.get_head()
  atts_28 = mk_atts(st,14,head_28,None)
  st.att_cache.extend(atts_28)
  st.set_slot(15)
  atts_29 = st.att_cache[:]
  st.att_cache.clear()
  head_29 = st.get_head()
  b_14 = mk_block(st, 15, head_29, atts_29)
  st.send_block(b_14)
  head_30 = st.get_head()
  atts_30 = mk_atts(st,15,head_30,None)
  st.att_cache.extend(atts_30)
  st.set_slot(16)
  atts_31 = st.att_cache[:]
  st.att_cache.clear()
  head_31 = st.get_head()
  b_15 = mk_block(st, 16, head_31, atts_31)
  st.send_block(b_15)
  head_32 = st.get_head()
  atts_32 = mk_atts(st,16,head_32,None)
  st.att_cache.extend(atts_32)
  st.set_slot(17)
  atts_33 = st.att_cache[:]
  st.att_cache.clear()
  head_33 = st.get_head()
  b_16 = mk_block(st, 17, head_33, atts_33)
  st.send_block(b_16)
  head_34 = st.get_head()
  atts_34 = mk_atts(st,17,head_34,None)
  st.att_cache.extend(atts_34)
  st.set_slot(18)
  atts_35 = st.att_cache[:]
  st.att_cache.clear()
  head_35 = st.get_head()
  b_17 = mk_block(st, 18, head_35, atts_35)
  st.send_block(b_17)
  head_36 = st.get_head()
  atts_36 = mk_atts(st,18,head_36,None)
  st.att_cache.extend(atts_36)
  st.set_slot(19)
  atts_37 = st.att_cache[:]
  st.att_cache.clear()
  head_37 = st.get_head()
  b_18 = mk_block(st, 19, head_37, atts_37)
  st.send_block(b_18)
  head_38 = st.get_head()
  atts_38 = mk_atts(st,19,head_38,None)
  st.att_cache.extend(atts_38)
  st.set_slot(20)
  atts_39 = st.att_cache[:]
  st.att_cache.clear()
  head_39 = st.get_head()
  b_19 = mk_block(st, 20, head_39, atts_39)
  st.send_block(b_19)
  head_40 = st.get_head()
  atts_40 = mk_atts(st,20,head_40,None)
  st.att_cache.extend(atts_40)
  st.set_slot(21)
  atts_41 = st.att_cache[:]
  st.att_cache.clear()
  head_41 = st.get_head()
  b_20 = mk_block(st, 21, head_41, atts_41)
  st.send_block(b_20)
  head_42 = st.get_head()
  atts_42 = mk_atts(st,21,head_42,None)
  st.att_cache.extend(atts_42)
  st.set_slot(22)
  atts_43 = st.att_cache[:]
  st.att_cache.clear()
  head_43 = st.get_head()
  b_21 = mk_block(st, 22, head_43, atts_43)
  st.send_block(b_21)
  head_44 = st.get_head()
  atts_44 = mk_atts(st,22,head_44,None)
  st.att_cache.extend(atts_44)
  st.set_slot(23)
  atts_45 = st.att_cache[:]
  st.att_cache.clear()
  head_45 = st.get_head()
  b_22 = mk_block(st, 23, head_45, atts_45)
  st.send_block(b_22)
  head_46 = st.get_head()
  atts_46 = mk_atts(st,23,head_46,None)
  st.att_cache.extend(atts_46)
  st.set_slot(24)
  atts_47 = st.att_cache[:]
  st.att_cache.clear()
  head_47 = st.get_head()
  b_23 = mk_block(st, 24, head_47, atts_47)
  st.send_block(b_23)
  head_48 = st.get_head()
  atts_48 = mk_atts(st,24,head_48,None)
  st.att_cache.extend(atts_48)
  st.set_slot(25)
  atts_49 = st.att_cache[:]
  st.att_cache.clear()
  head_49 = st.get_head()
  b_24 = mk_block(st, 25, head_49, atts_49)
  st.send_block(b_24)
  head_50 = st.get_head()
  atts_50 = mk_atts(st,25,head_50,None)
  st.att_cache.extend(atts_50)
  st.set_slot(26)
  atts_51 = st.att_cache[:]
  st.att_cache.clear()
  head_51 = st.get_head()
  b_25 = mk_block(st, 26, head_51, atts_51)
  st.send_block(b_25)
  head_52 = st.get_head()
  atts_52 = mk_atts(st,26,head_52,None)
  st.att_cache.extend(atts_52)
  st.set_slot(27)
  atts_53 = st.att_cache[:]
  st.att_cache.clear()
  head_53 = st.get_head()
  b_26 = mk_block(st, 27, head_53, atts_53)
  st.send_block(b_26)
  head_54 = st.get_head()
  atts_54 = mk_atts(st,27,head_54,None)
  st.att_cache.extend(atts_54)
  st.set_slot(28)
  atts_55 = st.att_cache[:]
  st.att_cache.clear()
  head_55 = st.get_head()
  b_27 = mk_block(st, 28, head_55, atts_55)
  st.send_block(b_27)
  head_56 = st.get_head()
  atts_56 = mk_atts(st,28,head_56,None)
  st.att_cache.extend(atts_56)
  st.set_slot(29)
  atts_57 = st.att_cache[:]
  st.att_cache.clear()
  head_57 = st.get_head()
  b_28 = mk_block(st, 29, head_57, atts_57)
  st.send_block(b_28)
  head_58 = st.get_head()
  atts_58 = mk_atts(st,29,head_58,None)
  st.att_cache.extend(atts_58)
  st.set_slot(30)
  atts_59 = st.att_cache[:]
  st.att_cache.clear()
  head_59 = st.get_head()
  b_29 = mk_block(st, 30, head_59, atts_59)
  st.send_block(b_29)
  head_60 = st.get_head()
  atts_60 = mk_atts(st,30,head_60,None)
  st.att_cache.extend(atts_60)
  st.set_slot(31)
  atts_61 = st.att_cache[:]
  st.att_cache.clear()
  head_61 = st.get_head()
  b_30 = mk_block(st, 31, head_61, atts_61)
  st.send_block(b_30)
  head_62 = st.get_head()
  atts_62 = mk_atts(st,31,head_62,None)
  st.att_cache.extend(atts_62)
  st.set_slot(32)
  atts_63 = st.att_cache[:]
  st.att_cache.clear()
  head_63 = st.get_head()
  b_31 = mk_block(st, 32, head_63, atts_63)
  st.send_block(b_31)
  head_64 = st.get_head()
  atts_64 = mk_atts(st,32,head_64,None)
  st.att_cache.extend(atts_64)
  st.set_slot(33)
  b_32 = mk_block(st, 33, head_0, [])
  assert not is_finalized_checkpoint_ancestor(st.store,b_32)
  st.send_block(b_32)
  st.block_not_in_store_check(block_root(b_32))
  dump_events(st, "valid_block__testFinalizedAncestor")

test_suite.append(valid_block__testFinalizedAncestor)

def valid_block__testFinalizedAncestor2():
  print('valid_block__testFinalizedAncestor2')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = mk_atts(st,0,head_0,None)
  st.att_cache.extend(atts_0)
  st.set_slot(1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 1, head_1, atts_1)
  st.send_block(b_0)
  head_2 = st.get_head()
  atts_2 = mk_atts(st,1,head_2,None)
  st.att_cache.extend(atts_2)
  st.set_slot(2)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  head_3 = st.get_head()
  b_1 = mk_block(st, 2, head_3, atts_3)
  st.send_block(b_1)
  head_4 = st.get_head()
  atts_4 = mk_atts(st,2,head_4,None)
  st.att_cache.extend(atts_4)
  st.set_slot(3)
  atts_5 = st.att_cache[:]
  st.att_cache.clear()
  head_5 = st.get_head()
  b_2 = mk_block(st, 3, head_5, atts_5)
  st.send_block(b_2)
  head_6 = st.get_head()
  atts_6 = mk_atts(st,3,head_6,None)
  st.att_cache.extend(atts_6)
  st.set_slot(4)
  atts_7 = st.att_cache[:]
  st.att_cache.clear()
  head_7 = st.get_head()
  b_3 = mk_block(st, 4, head_7, atts_7)
  st.send_block(b_3)
  head_8 = st.get_head()
  atts_8 = mk_atts(st,4,head_8,None)
  st.att_cache.extend(atts_8)
  st.set_slot(5)
  atts_9 = st.att_cache[:]
  st.att_cache.clear()
  head_9 = st.get_head()
  b_4 = mk_block(st, 5, head_9, atts_9)
  st.send_block(b_4)
  head_10 = st.get_head()
  atts_10 = mk_atts(st,5,head_10,None)
  st.att_cache.extend(atts_10)
  st.set_slot(6)
  atts_11 = st.att_cache[:]
  st.att_cache.clear()
  head_11 = st.get_head()
  b_5 = mk_block(st, 6, head_11, atts_11)
  st.send_block(b_5)
  head_12 = st.get_head()
  atts_12 = mk_atts(st,6,head_12,None)
  st.att_cache.extend(atts_12)
  st.set_slot(7)
  atts_13 = st.att_cache[:]
  st.att_cache.clear()
  head_13 = st.get_head()
  b_6 = mk_block(st, 7, head_13, atts_13)
  st.send_block(b_6)
  head_14 = st.get_head()
  atts_14 = mk_atts(st,7,head_14,None)
  st.att_cache.extend(atts_14)
  st.set_slot(8)
  atts_15 = st.att_cache[:]
  st.att_cache.clear()
  head_15 = st.get_head()
  b_7 = mk_block(st, 8, head_15, atts_15)
  st.send_block(b_7)
  head_16 = st.get_head()
  atts_16 = mk_atts(st,8,head_16,None)
  st.att_cache.extend(atts_16)
  st.set_slot(9)
  atts_17 = st.att_cache[:]
  st.att_cache.clear()
  head_17 = st.get_head()
  b_8 = mk_block(st, 9, head_17, atts_17)
  st.send_block(b_8)
  head_18 = st.get_head()
  atts_18 = mk_atts(st,9,head_18,None)
  st.att_cache.extend(atts_18)
  st.set_slot(10)
  atts_19 = st.att_cache[:]
  st.att_cache.clear()
  head_19 = st.get_head()
  b_9 = mk_block(st, 10, head_19, atts_19)
  st.send_block(b_9)
  head_20 = st.get_head()
  atts_20 = mk_atts(st,10,head_20,None)
  st.att_cache.extend(atts_20)
  st.set_slot(11)
  atts_21 = st.att_cache[:]
  st.att_cache.clear()
  head_21 = st.get_head()
  b_10 = mk_block(st, 11, head_21, atts_21)
  st.send_block(b_10)
  head_22 = st.get_head()
  atts_22 = mk_atts(st,11,head_22,None)
  st.att_cache.extend(atts_22)
  st.set_slot(12)
  atts_23 = st.att_cache[:]
  st.att_cache.clear()
  head_23 = st.get_head()
  b_11 = mk_block(st, 12, head_23, atts_23)
  st.send_block(b_11)
  head_24 = st.get_head()
  atts_24 = mk_atts(st,12,head_24,None)
  st.att_cache.extend(atts_24)
  st.set_slot(13)
  atts_25 = st.att_cache[:]
  st.att_cache.clear()
  head_25 = st.get_head()
  b_12 = mk_block(st, 13, head_25, atts_25)
  st.send_block(b_12)
  head_26 = st.get_head()
  atts_26 = mk_atts(st,13,head_26,None)
  st.att_cache.extend(atts_26)
  st.set_slot(14)
  atts_27 = st.att_cache[:]
  st.att_cache.clear()
  head_27 = st.get_head()
  b_13 = mk_block(st, 14, head_27, atts_27)
  st.send_block(b_13)
  head_28 = st.get_head()
  atts_28 = mk_atts(st,14,head_28,None)
  st.att_cache.extend(atts_28)
  st.set_slot(15)
  atts_29 = st.att_cache[:]
  st.att_cache.clear()
  head_29 = st.get_head()
  b_14 = mk_block(st, 15, head_29, atts_29)
  st.send_block(b_14)
  head_30 = st.get_head()
  atts_30 = mk_atts(st,15,head_30,None)
  st.att_cache.extend(atts_30)
  st.set_slot(16)
  atts_31 = st.att_cache[:]
  st.att_cache.clear()
  head_31 = st.get_head()
  b_15 = mk_block(st, 16, head_31, atts_31)
  st.send_block(b_15)
  head_32 = st.get_head()
  atts_32 = mk_atts(st,16,head_32,None)
  st.att_cache.extend(atts_32)
  st.set_slot(17)
  atts_33 = st.att_cache[:]
  st.att_cache.clear()
  head_33 = st.get_head()
  b_16 = mk_block(st, 17, head_33, atts_33)
  st.send_block(b_16)
  head_34 = st.get_head()
  atts_34 = mk_atts(st,17,head_34,None)
  st.att_cache.extend(atts_34)
  st.set_slot(18)
  atts_35 = st.att_cache[:]
  st.att_cache.clear()
  head_35 = st.get_head()
  b_17 = mk_block(st, 18, head_35, atts_35)
  st.send_block(b_17)
  head_36 = st.get_head()
  atts_36 = mk_atts(st,18,head_36,None)
  st.att_cache.extend(atts_36)
  st.set_slot(19)
  atts_37 = st.att_cache[:]
  st.att_cache.clear()
  head_37 = st.get_head()
  b_18 = mk_block(st, 19, head_37, atts_37)
  st.send_block(b_18)
  head_38 = st.get_head()
  atts_38 = mk_atts(st,19,head_38,None)
  st.att_cache.extend(atts_38)
  st.set_slot(20)
  atts_39 = st.att_cache[:]
  st.att_cache.clear()
  head_39 = st.get_head()
  b_19 = mk_block(st, 20, head_39, atts_39)
  st.send_block(b_19)
  head_40 = st.get_head()
  atts_40 = mk_atts(st,20,head_40,None)
  st.att_cache.extend(atts_40)
  st.set_slot(21)
  atts_41 = st.att_cache[:]
  st.att_cache.clear()
  head_41 = st.get_head()
  b_20 = mk_block(st, 21, head_41, atts_41)
  st.send_block(b_20)
  head_42 = st.get_head()
  atts_42 = mk_atts(st,21,head_42,None)
  st.att_cache.extend(atts_42)
  st.set_slot(22)
  atts_43 = st.att_cache[:]
  st.att_cache.clear()
  head_43 = st.get_head()
  b_21 = mk_block(st, 22, head_43, atts_43)
  st.send_block(b_21)
  head_44 = st.get_head()
  atts_44 = mk_atts(st,22,head_44,None)
  st.att_cache.extend(atts_44)
  st.set_slot(23)
  atts_45 = st.att_cache[:]
  st.att_cache.clear()
  head_45 = st.get_head()
  b_22 = mk_block(st, 23, head_45, atts_45)
  st.send_block(b_22)
  head_46 = st.get_head()
  atts_46 = mk_atts(st,23,head_46,None)
  st.att_cache.extend(atts_46)
  st.set_slot(24)
  head_47 = st.get_head()
  b_23 = mk_block(st, 24, head_0, [])
  st.send_block(b_23)
  st.set_slot(25)
  atts_47 = st.att_cache[:]
  st.att_cache.clear()
  b_24 = mk_block(st, 25, head_47, atts_47)
  st.send_block(b_24)
  atts_48 = mk_atts(st,25,b_24,None)
  st.att_cache.extend(atts_48)
  head_50 = st.get_head()
  st.set_slot(26)
  atts_49 = st.att_cache[:]
  st.att_cache.clear()
  b_25 = mk_block(st, 26, head_50, atts_49)
  st.send_block(b_25)
  atts_50 = mk_atts(st,26,b_25,None)
  st.att_cache.extend(atts_50)
  head_52 = st.get_head()
  st.set_slot(27)
  atts_51 = st.att_cache[:]
  st.att_cache.clear()
  b_26 = mk_block(st, 27, head_52, atts_51)
  st.send_block(b_26)
  atts_52 = mk_atts(st,27,b_26,None)
  st.att_cache.extend(atts_52)
  head_54 = st.get_head()
  st.set_slot(28)
  atts_53 = st.att_cache[:]
  st.att_cache.clear()
  b_27 = mk_block(st, 28, head_54, atts_53)
  st.send_block(b_27)
  atts_54 = mk_atts(st,28,b_27,None)
  st.att_cache.extend(atts_54)
  head_56 = st.get_head()
  st.set_slot(29)
  atts_55 = st.att_cache[:]
  st.att_cache.clear()
  b_28 = mk_block(st, 29, head_56, atts_55)
  st.send_block(b_28)
  atts_56 = mk_atts(st,29,b_28,None)
  st.att_cache.extend(atts_56)
  head_58 = st.get_head()
  st.set_slot(30)
  atts_57 = st.att_cache[:]
  st.att_cache.clear()
  b_29 = mk_block(st, 30, head_58, atts_57)
  st.send_block(b_29)
  atts_58 = mk_atts(st,30,b_29,None)
  st.att_cache.extend(atts_58)
  head_60 = st.get_head()
  st.set_slot(31)
  atts_59 = st.att_cache[:]
  st.att_cache.clear()
  b_30 = mk_block(st, 31, head_60, atts_59)
  st.send_block(b_30)
  atts_60 = mk_atts(st,31,b_30,None)
  st.att_cache.extend(atts_60)
  head_62 = st.get_head()
  st.set_slot(32)
  atts_61 = st.att_cache[:]
  st.att_cache.clear()
  b_31 = mk_block(st, 32, head_62, atts_61)
  st.send_block(b_31)
  atts_62 = mk_atts(st,32,b_31,None)
  st.att_cache.extend(atts_62)
  head_64 = st.get_head()
  st.set_slot(33)
  b_32 = mk_block(st, 33, block_root(b_23), [])
  assert not is_finalized_checkpoint_ancestor(st.store,b_32)
  st.send_block(b_32)
  st.block_not_in_store_check(block_root(b_32))
  dump_events(st, "valid_block__testFinalizedAncestor2")

test_suite.append(valid_block__testFinalizedAncestor2)

def valid_block__testFinalizedAncestor3():
  print('valid_block__testFinalizedAncestor3')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = mk_atts(st,0,head_0,None)
  st.att_cache.extend(atts_0)
  st.set_slot(1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 1, head_1, atts_1)
  st.send_block(b_0)
  head_2 = st.get_head()
  atts_2 = mk_atts(st,1,head_2,None)
  st.att_cache.extend(atts_2)
  st.set_slot(2)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  head_3 = st.get_head()
  b_1 = mk_block(st, 2, head_3, atts_3)
  st.send_block(b_1)
  head_4 = st.get_head()
  atts_4 = mk_atts(st,2,head_4,None)
  st.att_cache.extend(atts_4)
  st.set_slot(3)
  atts_5 = st.att_cache[:]
  st.att_cache.clear()
  head_5 = st.get_head()
  b_2 = mk_block(st, 3, head_5, atts_5)
  st.send_block(b_2)
  head_6 = st.get_head()
  atts_6 = mk_atts(st,3,head_6,None)
  st.att_cache.extend(atts_6)
  st.set_slot(4)
  atts_7 = st.att_cache[:]
  st.att_cache.clear()
  head_7 = st.get_head()
  b_3 = mk_block(st, 4, head_7, atts_7)
  st.send_block(b_3)
  head_8 = st.get_head()
  atts_8 = mk_atts(st,4,head_8,None)
  st.att_cache.extend(atts_8)
  st.set_slot(5)
  atts_9 = st.att_cache[:]
  st.att_cache.clear()
  head_9 = st.get_head()
  b_4 = mk_block(st, 5, head_9, atts_9)
  st.send_block(b_4)
  head_10 = st.get_head()
  atts_10 = mk_atts(st,5,head_10,None)
  st.att_cache.extend(atts_10)
  st.set_slot(6)
  atts_11 = st.att_cache[:]
  st.att_cache.clear()
  head_11 = st.get_head()
  b_5 = mk_block(st, 6, head_11, atts_11)
  st.send_block(b_5)
  head_12 = st.get_head()
  atts_12 = mk_atts(st,6,head_12,None)
  st.att_cache.extend(atts_12)
  st.set_slot(7)
  atts_13 = st.att_cache[:]
  st.att_cache.clear()
  head_13 = st.get_head()
  b_6 = mk_block(st, 7, head_13, atts_13)
  st.send_block(b_6)
  head_14 = st.get_head()
  atts_14 = mk_atts(st,7,head_14,None)
  st.att_cache.extend(atts_14)
  st.set_slot(8)
  atts_15 = st.att_cache[:]
  st.att_cache.clear()
  head_15 = st.get_head()
  b_7 = mk_block(st, 8, head_15, atts_15)
  st.send_block(b_7)
  head_16 = st.get_head()
  atts_16 = mk_atts(st,8,head_16,None)
  st.att_cache.extend(atts_16)
  st.set_slot(9)
  atts_17 = st.att_cache[:]
  st.att_cache.clear()
  head_17 = st.get_head()
  b_8 = mk_block(st, 9, head_17, atts_17)
  st.send_block(b_8)
  head_18 = st.get_head()
  atts_18 = mk_atts(st,9,head_18,None)
  st.att_cache.extend(atts_18)
  st.set_slot(10)
  atts_19 = st.att_cache[:]
  st.att_cache.clear()
  head_19 = st.get_head()
  b_9 = mk_block(st, 10, head_19, atts_19)
  st.send_block(b_9)
  head_20 = st.get_head()
  atts_20 = mk_atts(st,10,head_20,None)
  st.att_cache.extend(atts_20)
  st.set_slot(11)
  atts_21 = st.att_cache[:]
  st.att_cache.clear()
  head_21 = st.get_head()
  b_10 = mk_block(st, 11, head_21, atts_21)
  st.send_block(b_10)
  head_22 = st.get_head()
  atts_22 = mk_atts(st,11,head_22,None)
  st.att_cache.extend(atts_22)
  st.set_slot(12)
  atts_23 = st.att_cache[:]
  st.att_cache.clear()
  head_23 = st.get_head()
  b_11 = mk_block(st, 12, head_23, atts_23)
  st.send_block(b_11)
  head_24 = st.get_head()
  atts_24 = mk_atts(st,12,head_24,None)
  st.att_cache.extend(atts_24)
  st.set_slot(13)
  atts_25 = st.att_cache[:]
  st.att_cache.clear()
  head_25 = st.get_head()
  b_12 = mk_block(st, 13, head_25, atts_25)
  st.send_block(b_12)
  head_26 = st.get_head()
  atts_26 = mk_atts(st,13,head_26,None)
  st.att_cache.extend(atts_26)
  st.set_slot(14)
  atts_27 = st.att_cache[:]
  st.att_cache.clear()
  head_27 = st.get_head()
  b_13 = mk_block(st, 14, head_27, atts_27)
  st.send_block(b_13)
  head_28 = st.get_head()
  atts_28 = mk_atts(st,14,head_28,None)
  st.att_cache.extend(atts_28)
  st.set_slot(15)
  atts_29 = st.att_cache[:]
  st.att_cache.clear()
  head_29 = st.get_head()
  b_14 = mk_block(st, 15, head_29, atts_29)
  st.send_block(b_14)
  head_30 = st.get_head()
  atts_30 = mk_atts(st,15,head_30,None)
  st.att_cache.extend(atts_30)
  st.set_slot(16)
  atts_31 = st.att_cache[:]
  st.att_cache.clear()
  head_31 = st.get_head()
  b_15 = mk_block(st, 16, head_31, atts_31)
  st.send_block(b_15)
  head_32 = st.get_head()
  atts_32 = mk_atts(st,16,head_32,None)
  st.att_cache.extend(atts_32)
  st.set_slot(17)
  atts_33 = st.att_cache[:]
  st.att_cache.clear()
  head_33 = st.get_head()
  b_16 = mk_block(st, 17, head_33, atts_33)
  st.send_block(b_16)
  head_34 = st.get_head()
  atts_34 = mk_atts(st,17,head_34,None)
  st.att_cache.extend(atts_34)
  st.set_slot(18)
  atts_35 = st.att_cache[:]
  st.att_cache.clear()
  head_35 = st.get_head()
  b_17 = mk_block(st, 18, head_35, atts_35)
  st.send_block(b_17)
  head_36 = st.get_head()
  atts_36 = mk_atts(st,18,head_36,None)
  st.att_cache.extend(atts_36)
  st.set_slot(19)
  atts_37 = st.att_cache[:]
  st.att_cache.clear()
  head_37 = st.get_head()
  b_18 = mk_block(st, 19, head_37, atts_37)
  st.send_block(b_18)
  head_38 = st.get_head()
  atts_38 = mk_atts(st,19,head_38,None)
  st.att_cache.extend(atts_38)
  st.set_slot(20)
  atts_39 = st.att_cache[:]
  st.att_cache.clear()
  head_39 = st.get_head()
  b_19 = mk_block(st, 20, head_39, atts_39)
  st.send_block(b_19)
  head_40 = st.get_head()
  atts_40 = mk_atts(st,20,head_40,None)
  st.att_cache.extend(atts_40)
  st.set_slot(21)
  atts_41 = st.att_cache[:]
  st.att_cache.clear()
  head_41 = st.get_head()
  b_20 = mk_block(st, 21, head_41, atts_41)
  st.send_block(b_20)
  head_42 = st.get_head()
  atts_42 = mk_atts(st,21,head_42,None)
  st.att_cache.extend(atts_42)
  st.set_slot(22)
  atts_43 = st.att_cache[:]
  st.att_cache.clear()
  head_43 = st.get_head()
  b_21 = mk_block(st, 22, head_43, atts_43)
  st.send_block(b_21)
  head_44 = st.get_head()
  atts_44 = mk_atts(st,22,head_44,None)
  st.att_cache.extend(atts_44)
  st.set_slot(23)
  atts_45 = st.att_cache[:]
  st.att_cache.clear()
  head_45 = st.get_head()
  b_22 = mk_block(st, 23, head_45, atts_45)
  st.send_block(b_22)
  head_46 = st.get_head()
  atts_46 = mk_atts(st,23,head_46,None)
  st.att_cache.extend(atts_46)
  st.set_slot(24)
  atts_47 = st.att_cache[:]
  st.att_cache.clear()
  head_47 = st.get_head()
  b_23 = mk_block(st, 24, head_47, atts_47)
  st.send_block(b_23)
  head_48 = st.get_head()
  atts_48 = mk_atts(st,24,head_48,None)
  st.att_cache.extend(atts_48)
  st.set_slot(25)
  atts_49 = st.att_cache[:]
  st.att_cache.clear()
  head_49 = st.get_head()
  b_24 = mk_block(st, 25, head_49, atts_49)
  st.send_block(b_24)
  head_50 = st.get_head()
  atts_50 = mk_atts(st,25,head_50,None)
  st.att_cache.extend(atts_50)
  st.set_slot(26)
  atts_51 = st.att_cache[:]
  st.att_cache.clear()
  head_51 = st.get_head()
  b_25 = mk_block(st, 26, head_51, atts_51)
  st.send_block(b_25)
  head_52 = st.get_head()
  atts_52 = mk_atts(st,26,head_52,None)
  st.att_cache.extend(atts_52)
  st.set_slot(27)
  atts_53 = st.att_cache[:]
  st.att_cache.clear()
  head_53 = st.get_head()
  b_26 = mk_block(st, 27, head_53, atts_53)
  st.send_block(b_26)
  head_54 = st.get_head()
  atts_54 = mk_atts(st,27,head_54,None)
  st.att_cache.extend(atts_54)
  st.set_slot(28)
  head_55 = st.get_head()
  b_27 = mk_block(st, 28, head_0, [])
  st.send_block(b_27)
  st.set_slot(29)
  atts_55 = st.att_cache[:]
  st.att_cache.clear()
  b_28 = mk_block(st, 29, head_55, atts_55)
  st.send_block(b_28)
  atts_56 = mk_atts(st,29,b_28,None)
  st.att_cache.extend(atts_56)
  head_58 = st.get_head()
  st.set_slot(30)
  atts_57 = st.att_cache[:]
  st.att_cache.clear()
  b_29 = mk_block(st, 30, head_58, atts_57)
  st.send_block(b_29)
  atts_58 = mk_atts(st,30,b_29,None)
  st.att_cache.extend(atts_58)
  head_60 = st.get_head()
  st.set_slot(31)
  atts_59 = st.att_cache[:]
  st.att_cache.clear()
  b_30 = mk_block(st, 31, head_60, atts_59)
  st.send_block(b_30)
  atts_60 = mk_atts(st,31,b_30,None)
  st.att_cache.extend(atts_60)
  head_62 = st.get_head()
  st.set_slot(32)
  atts_61 = st.att_cache[:]
  st.att_cache.clear()
  b_31 = mk_block(st, 32, head_62, atts_61)
  st.send_block(b_31)
  atts_62 = mk_atts(st,32,b_31,None)
  st.att_cache.extend(atts_62)
  head_64 = st.get_head()
  st.set_slot(33)
  b_32 = mk_block(st, 33, block_root(b_27), [])
  assert not is_finalized_checkpoint_ancestor(st.store,b_32)
  st.send_block(b_32)
  st.block_not_in_store_check(block_root(b_32))
  dump_events(st, "valid_block__testFinalizedAncestor3")

test_suite.append(valid_block__testFinalizedAncestor3)

def valid_block__testTimeReject1():
  print('valid_block__testTimeReject1')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 3, head_0, atts_0)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_not_in_store_check(block_root(b_0))
  st.set_slot(3)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testTimeReject1")

test_suite.append(valid_block__testTimeReject1)

def valid_block__testTimeReject2():
  print('valid_block__testTimeReject2')
  st = State(genesis_state.copy())
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_0 = st.get_head()
  b_0 = mk_block(st, 4, head_0, atts_0)
  st.set_slot(2)
  st.send_block(b_0)
  st.block_not_in_store_check(block_root(b_0))
  st.set_slot(3)
  st.block_not_in_store_check(block_root(b_0))
  st.set_slot(4)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testTimeReject2")

test_suite.append(valid_block__testTimeReject2)

def valid_block__testUpdateFinality():
  print('valid_block__testUpdateFinality')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = mk_atts(st,0,head_0,None)
  st.att_cache.extend(atts_0)
  st.set_slot(1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 1, head_1, atts_1)
  st.send_block(b_0)
  head_2 = st.get_head()
  atts_2 = mk_atts(st,1,head_2,None)
  st.att_cache.extend(atts_2)
  st.set_slot(2)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  head_3 = st.get_head()
  b_1 = mk_block(st, 2, head_3, atts_3)
  st.send_block(b_1)
  head_4 = st.get_head()
  atts_4 = mk_atts(st,2,head_4,None)
  st.att_cache.extend(atts_4)
  st.set_slot(3)
  atts_5 = st.att_cache[:]
  st.att_cache.clear()
  head_5 = st.get_head()
  b_2 = mk_block(st, 3, head_5, atts_5)
  st.send_block(b_2)
  head_6 = st.get_head()
  atts_6 = mk_atts(st,3,head_6,None)
  st.att_cache.extend(atts_6)
  st.set_slot(4)
  atts_7 = st.att_cache[:]
  st.att_cache.clear()
  head_7 = st.get_head()
  b_3 = mk_block(st, 4, head_7, atts_7)
  st.send_block(b_3)
  head_8 = st.get_head()
  atts_8 = mk_atts(st,4,head_8,None)
  st.att_cache.extend(atts_8)
  st.set_slot(5)
  atts_9 = st.att_cache[:]
  st.att_cache.clear()
  head_9 = st.get_head()
  b_4 = mk_block(st, 5, head_9, atts_9)
  st.send_block(b_4)
  head_10 = st.get_head()
  atts_10 = mk_atts(st,5,head_10,None)
  st.att_cache.extend(atts_10)
  st.set_slot(6)
  atts_11 = st.att_cache[:]
  st.att_cache.clear()
  head_11 = st.get_head()
  b_5 = mk_block(st, 6, head_11, atts_11)
  st.send_block(b_5)
  head_12 = st.get_head()
  atts_12 = mk_atts(st,6,head_12,None)
  st.att_cache.extend(atts_12)
  st.set_slot(7)
  atts_13 = st.att_cache[:]
  st.att_cache.clear()
  head_13 = st.get_head()
  b_6 = mk_block(st, 7, head_13, atts_13)
  st.send_block(b_6)
  head_14 = st.get_head()
  atts_14 = mk_atts(st,7,head_14,None)
  st.att_cache.extend(atts_14)
  st.set_slot(8)
  atts_15 = st.att_cache[:]
  st.att_cache.clear()
  head_15 = st.get_head()
  b_7 = mk_block(st, 8, head_15, atts_15)
  st.send_block(b_7)
  head_16 = st.get_head()
  atts_16 = mk_atts(st,8,head_16,None)
  st.att_cache.extend(atts_16)
  st.set_slot(9)
  atts_17 = st.att_cache[:]
  st.att_cache.clear()
  head_17 = st.get_head()
  b_8 = mk_block(st, 9, head_17, atts_17)
  st.send_block(b_8)
  head_18 = st.get_head()
  atts_18 = mk_atts(st,9,head_18,None)
  st.att_cache.extend(atts_18)
  st.set_slot(10)
  atts_19 = st.att_cache[:]
  st.att_cache.clear()
  head_19 = st.get_head()
  b_9 = mk_block(st, 10, head_19, atts_19)
  st.send_block(b_9)
  head_20 = st.get_head()
  atts_20 = mk_atts(st,10,head_20,None)
  st.att_cache.extend(atts_20)
  st.set_slot(11)
  atts_21 = st.att_cache[:]
  st.att_cache.clear()
  head_21 = st.get_head()
  b_10 = mk_block(st, 11, head_21, atts_21)
  st.send_block(b_10)
  head_22 = st.get_head()
  atts_22 = mk_atts(st,11,head_22,None)
  st.att_cache.extend(atts_22)
  st.att_cache.clear()
  st.set_slot(12)
  atts_23 = st.att_cache[:]
  st.att_cache.clear()
  b_11 = mk_block(st, 12, head_0, atts_23)
  st.send_block(b_11)
  head_24 = st.get_head()
  atts_24 = mk_atts(st,12,head_24,None)
  st.att_cache.extend(atts_24)
  st.set_slot(13)
  atts_25 = st.att_cache[:]
  st.att_cache.clear()
  b_12 = mk_block(st, 13, head_24, atts_25)
  st.send_block(b_12)
  head_26 = st.get_head()
  atts_26 = mk_atts(st,13,head_26,None)
  st.att_cache.extend(atts_26)
  st.set_slot(14)
  atts_27 = st.att_cache[:]
  st.att_cache.clear()
  b_13 = mk_block(st, 14, head_26, atts_27)
  st.send_block(b_13)
  head_28 = st.get_head()
  atts_28 = mk_atts(st,14,head_28,None)
  st.att_cache.extend(atts_28)
  st.set_slot(15)
  atts_29 = st.att_cache[:]
  st.att_cache.clear()
  b_14 = mk_block(st, 15, head_28, atts_29)
  st.send_block(b_14)
  head_30 = st.get_head()
  atts_30 = mk_atts(st,15,head_30,None)
  st.att_cache.extend(atts_30)
  st.set_slot(16)
  atts_31 = st.att_cache[:]
  st.att_cache.clear()
  b_15 = mk_block(st, 16, head_30, atts_31)
  st.send_block(b_15)
  head_32 = st.get_head()
  atts_32 = mk_atts(st,16,head_32,None)
  st.att_cache.extend(atts_32)
  jc_32 = st.store.justified_checkpoint
  b_16 = mk_block(st, 12, head_22, [])
  st.send_block(b_16)
  st.justified_checkpoint_epoch_check(jc_32)
  dump_events(st, "valid_block__testUpdateFinality")

test_suite.append(valid_block__testUpdateFinality)

def valid_block__testValid1():
  print('valid_block__testValid1')
  st = State(genesis_state.copy())
  st.set_slot(2)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 1, head_1, atts_0)
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testValid1")

test_suite.append(valid_block__testValid1)

def valid_block__testValid2():
  print('valid_block__testValid2')
  st = State(genesis_state.copy())
  st.set_slot(2)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  head_1 = st.get_head()
  b_0 = mk_block(st, 2, head_1, atts_0)
  st.send_block(b_0)
  st.block_in_store_check(block_root(b_0))
  dump_events(st, "valid_block__testValid2")

test_suite.append(valid_block__testValid2)

def valid_attestation__testAttestation():
  print('valid_attestation__testAttestation')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  head_7 = st.get_head()
  b_2 = mk_block(st, 5, head_7, atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_2)
  dump_events(st, "valid_attestation__testAttestation")

test_suite.append(valid_attestation__testAttestation)

def valid_attestation__testAttestation1_block_attestations():
  print('valid_attestation__testAttestation1_block_attestations')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  st.att_cache.extend(atts_2)
  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 5, block_root(b_0), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "valid_attestation__testAttestation1_block_attestations")

test_suite.append(valid_attestation__testAttestation1_block_attestations)

def valid_attestation__testAttestation1_block_attestations2():
  print('valid_attestation__testAttestation1_block_attestations2')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  st.att_cache.extend(atts_2)
  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 5, block_root(b_1), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_2)
  dump_events(st, "valid_attestation__testAttestation1_block_attestations2")

test_suite.append(valid_attestation__testAttestation1_block_attestations2)

def valid_attestation__testAttestation1_block_wire_attestations():
  print('valid_attestation__testAttestation1_block_wire_attestations')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  st.att_cache.extend(atts_2)
  for a in st.att_cache:
    st.send_attestation(a)

  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 5, block_root(b_0), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "valid_attestation__testAttestation1_block_wire_attestations")

test_suite.append(valid_attestation__testAttestation1_block_wire_attestations)

def valid_attestation__testAttestation1_wire_attestations():
  print('valid_attestation__testAttestation1_wire_attestations')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(5)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "valid_attestation__testAttestation1_wire_attestations")

test_suite.append(valid_attestation__testAttestation1_wire_attestations)

def valid_attestation__testAttestation2():
  print('valid_attestation__testAttestation2')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_1,None)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 5, block_root(b_0), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "valid_attestation__testAttestation2")

test_suite.append(valid_attestation__testAttestation2)

def valid_attestation__testAttestation_early():
  print('valid_attestation__testAttestation_early')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  head_4 = st.get_head()
  st.set_slot(4)
  atts_2 = mk_atts(st,4,b_0,None)
  st.att_cache.extend(atts_2)
  head_5 = st.get_head()
  atts_3 = mk_atts(st,4,head_5,None)
  for a in atts_3:
    st.send_attestation(a)

  assert st.get_head() == head_4
  dump_events(st, "valid_attestation__testAttestation_early")

test_suite.append(valid_attestation__testAttestation_early)

def valid_attestation__testAttestation_early_before_block():
  print('valid_attestation__testAttestation_early_before_block')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  head_4 = st.get_head()
  st.set_slot(4)
  b_min = min(b_0,b_1,key=block_root)
  b_max = max(b_0,b_1,key=block_root)
  assert st.get_head() == block_root(b_max)
  atts_2 = mk_atts(st,4,b_min,None)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(5)
  assert st.get_head() == block_root(b_min)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 4, block_root(b_max), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_min)
  dump_events(st, "valid_attestation__testAttestation_early_before_block")

test_suite.append(valid_attestation__testAttestation_early_before_block)

def valid_attestation__testAttestation_late():
  print('valid_attestation__testAttestation_late')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  st.set_slot(1)
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0)
  st.send_block(b_0)
  st.set_slot(2)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1)
  st.send_block(b_1)
  head_4 = st.get_head()
  st.set_slot(4)
  b_min = min(b_0,b_1,key=block_root)
  b_max = max(b_0,b_1,key=block_root)
  atts_2 = mk_atts(st,4,b_min,None)
  st.set_slot(5)
  atts_3 = st.att_cache[:]
  st.att_cache.clear()
  b_2 = mk_block(st, 5, block_root(b_max), atts_3)
  st.send_block(b_2)
  assert st.get_head() == block_root(b_2)
  for a in atts_2:
    st.send_attestation(a)

  assert st.get_head() == block_root(b_min)
  st.set_slot(6)
  assert st.get_head() == block_root(b_min)
  dump_events(st, "valid_attestation__testAttestation_late")

test_suite.append(valid_attestation__testAttestation_late)

def valid_attestation__testAttestation_late_parent():
  print('valid_attestation__testAttestation_late_parent')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  atts_2 = mk_atts(st,1,b_0,None,allow_offchain_blocks=True)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(2)
  st.send_block(b_1)
  atts_3 = mk_atts(st,2,b_1,None,allow_offchain_blocks=True)
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  dump_events(st, "valid_attestation__testAttestation_late_parent")

test_suite.append(valid_attestation__testAttestation_late_parent)

def invalid_attestation__all_invalid_indexed_attestation_wrong_signature():
  print('invalid_attestation__all_invalid_indexed_attestation_wrong_signature')
  st = State(genesis_state.copy())
  st.set_bls_setting(1)
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  atts_2 = mk_atts(st,2,b_1,None,bad_signature=True)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_0)
  dump_events(st, "invalid_attestation__all_invalid_indexed_attestation_wrong_signature")

test_suite.append(invalid_attestation__all_invalid_indexed_attestation_wrong_signature)

def invalid_attestation__first_invalid_indexed_attestation_wrong_signature():
  print('invalid_attestation__first_invalid_indexed_attestation_wrong_signature')
  st = State(genesis_state.copy())
  st.set_bls_setting(1)
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:1],bad_signature=True)
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[1:])
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__first_invalid_indexed_attestation_wrong_signature")

test_suite.append(invalid_attestation__first_invalid_indexed_attestation_wrong_signature)

def invalid_attestation__last_invalid_indexed_attestation_wrong_signature():
  print('invalid_attestation__last_invalid_indexed_attestation_wrong_signature')
  st = State(genesis_state.copy())
  st.set_bls_setting(1)
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:-1])
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[-1:],bad_signature=True)
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__last_invalid_indexed_attestation_wrong_signature")

test_suite.append(invalid_attestation__last_invalid_indexed_attestation_wrong_signature)

def invalid_attestation__attestation_bad_index_all():
  print('invalid_attestation__attestation_bad_index_all')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  atts_2 = mk_atts(st,2,b_1,None,bad_index=True)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_0)
  dump_events(st, "invalid_attestation__attestation_bad_index_all")

test_suite.append(invalid_attestation__attestation_bad_index_all)

def invalid_attestation__attestation_bad_index_first():
  print('invalid_attestation__attestation_bad_index_first')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:1],bad_index=True)
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[1:])
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__attestation_bad_index_first")

test_suite.append(invalid_attestation__attestation_bad_index_first)

def invalid_attestation__attestation_bad_index_last():
  print('invalid_attestation__attestation_bad_index_last')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:-1])
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[-1:],bad_index=True)
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__attestation_bad_index_last")

test_suite.append(invalid_attestation__attestation_bad_index_last)

def invalid_attestation__invalid_target_epoch_all():
  print('invalid_attestation__invalid_target_epoch_all')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  atts_2 = mk_atts(st,2,b_1,None,bad_target_epoch=True)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_0)
  dump_events(st, "invalid_attestation__invalid_target_epoch_all")

test_suite.append(invalid_attestation__invalid_target_epoch_all)

def invalid_attestation__invalid_target_epoch_first():
  print('invalid_attestation__invalid_target_epoch_first')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:1],bad_target_epoch=True)
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[1:])
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__invalid_target_epoch_first")

test_suite.append(invalid_attestation__invalid_target_epoch_first)

def invalid_attestation__invalid_target_epoch_last():
  print('invalid_attestation__invalid_target_epoch_last')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:-1])
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[-1:],bad_target_epoch=True)
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__invalid_target_epoch_last")

test_suite.append(invalid_attestation__invalid_target_epoch_last)

def invalid_attestation__non_existing_target_root_all():
  print('invalid_attestation__non_existing_target_root_all')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  atts_2 = mk_atts(st,2,b_1,None,bad_target_root=True)
  for a in atts_2:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_0)
  dump_events(st, "invalid_attestation__non_existing_target_root_all")

test_suite.append(invalid_attestation__non_existing_target_root_all)

def invalid_attestation__non_existing_target_root_first():
  print('invalid_attestation__non_existing_target_root_first')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:1],bad_target_root=True)
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[1:])
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__non_existing_target_root_first")

test_suite.append(invalid_attestation__non_existing_target_root_first)

def invalid_attestation__non_existing_target_root_last():
  print('invalid_attestation__non_existing_target_root_last')
  st = State(genesis_state.copy())
  head_0 = st.get_head()
  atts_0 = st.att_cache[:]
  st.att_cache.clear()
  b_0 = mk_block(st, 1, head_0, atts_0, graffiti = gf1)
  atts_1 = st.att_cache[:]
  st.att_cache.clear()
  b_1 = mk_block(st, 2, head_0, atts_1, graffiti = gf2)
  assert block_root(b_0) > block_root(b_1)
  st.set_slot(1)
  st.send_block(b_0)
  assert st.get_head() == block_root(b_0)
  st.set_slot(2)
  assert st.get_head() == block_root(b_0)
  st.send_block(b_1)
  assert st.get_head() == block_root(b_0)
  attesters_0 = get_attesters(st, 2, block_root(b_1))
  atts_2 = mk_atts(st,2,b_1,attesters_0[0:-1])
  for a in atts_2:
    st.send_attestation(a)

  atts_3 = mk_atts(st,2,b_1,attesters_0[-1:],bad_target_root=True)
  for a in atts_3:
    st.send_attestation(a)

  st.set_slot(3)
  assert st.get_head() == block_root(b_1)
  dump_events(st, "invalid_attestation__non_existing_target_root_last")

test_suite.append(invalid_attestation__non_existing_target_root_last)

run_tests(test_suite)